{"pageProps":{"frontmatter":{},"headings":[{"depth":2,"value":"init()"},{"depth":3,"value":"InitPayloadType"},{"depth":2,"value":"exit()"},{"depth":3,"value":"ExitPayloadType"},{"depth":2,"value":"generateDistinctKey()"},{"depth":2,"value":"createChat()"},{"depth":2,"value":"updateChat()"},{"depth":2,"value":"createAdminMessage()"},{"depth":2,"value":"getMissedCount()"},{"depth":2,"value":"getMembers()"}],"body":{"compiledSource":"var l=Object.defineProperty,m=Object.defineProperties;var y=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var o=(e,t,a)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,r=(e,t)=>{for(var a in t||(t={}))s.call(t,a)&&o(e,a,t[a]);if(n)for(var a of n(t))p.call(t,a)&&o(e,a,t[a]);return e},d=(e,t)=>m(e,y(t));var c=(e,t)=>{var a={};for(var i in e)s.call(e,i)&&t.indexOf(i)<0&&(a[i]=e[i]);if(e!=null&&n)for(var i of n(e))t.indexOf(i)<0&&p.call(e,i)&&(a[i]=e[i]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var i=a,{components:e}=i,t=c(i,[\"components\"]);return mdx(MDXLayout,d(r(r({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"Static Methods\"),mdx(\"p\",null,\"Chatty class static methods. These are async and non-socket methods\"),mdx(\"h2\",null,\"init()\"),mdx(\"p\",null,\"static method init is for initialize chatty client. it will initialize apiKey and chat member\"),mdx(\"h3\",null,\"InitPayloadType\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-typescript\"}),`export interface InitPayloadType {\n  apiKey: string;\n  member: {\n    id: string\n    name: string\n    language: string\n    country: string\n    avatar: string\n    deviceToken: string\n    device: DeviceType | null\n    group: string\n    permission: MemberPermissionType\n    data: any | null\n  };\n}\n\n\nawait Chatty.init(payload: InitPayloadType);\n`)),mdx(\"h2\",null,\"exit()\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"static method exit is for terminate chatty client. \"),mdx(\"li\",{parentName:\"ul\"},\"when App user sign out, it will destroy apiKey and chat member\"),mdx(\"li\",{parentName:\"ul\"},\"To delete a member, set deleteMember to true. If it's true, the member will be deleted, and excluded from associated all chat.\")),mdx(\"h3\",null,\"ExitPayloadType\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-typescript\"}),`export interface ExitPayloadType {\n  deleteMember?: boolean;\n}\n\nawait Chatty.exit(payload: ExitPayloadType);\n`)),mdx(\"h2\",null,\"generateDistinctKey()\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"distinctKey of chat schema is used for making the chat unique and this function helps you to make your own key.\"),mdx(\"li\",{parentName:\"ul\"},\"This method returns md5 hashed value using parameters and an order of parameters does not effect the return value.\")),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-typescript\"}),`await Chatty.generateDistinctKey(param1, param2, ..., paramN);\n\n`)),mdx(\"h2\",null,\"createChat()\"),mdx(\"p\",null,\"Creating a new chat.\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-typescript\"}),`export interface CreateChatPayloadType {\n    distinctKey?: string;\n    name?: string;\n    image?: string;\n    group?: string;\n    data?: any;\n    Members?: Array<string>;\n    adminMessage?: {\n        text?: string;\n        json?: object;\n    };\n}\n\nawait Chatty.createChat(payload: CreateChatPayloadType);\n\n`)),mdx(\"h2\",null,\"updateChat()\"),mdx(\"p\",null,\"Updating a chat\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-typescript\"}),`export interface UpdateChatPayloadType {\n    id: string;\n    distinctKey?: string;\n    name?: string;\n    image?: string;\n    group?: string;\n    data?: any;\n    Members?: Array<string>;\n    adminMessage?: {\n        text?: string;\n        json?: object;\n    };\n}\n\nawait Chatty.updateChat(payload: UpdateChatPayloadType);\n\n`)),mdx(\"h2\",null,\"createAdminMessage()\"),mdx(\"p\",null,\"Creating a admin message. \"),mdx(\"p\",null,\"Used only when being aware of a chat's distinctKey not a chat's id. if there is no matched chat, new chat with the distinctKey is created,\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-typescript\"}),`export interface CreateAdminMessagePayloadType {\n    distinctKey: string;\n    name?: string;\n    image?: string;\n    group?: string;\n    data?: any;\n    Members?: Array<string>;\n    adminMessage?: {\n        text?: string;\n        json?: object;\n    };\n}\n\nconst chat = await Chatty.createAdminMessage(payload: CreateAdminMessagePayloadType);\n\n`)),mdx(\"h2\",null,\"getMissedCount()\"),mdx(\"p\",null,\"commonly used for show badge count on chat button\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-typescript\"}),`await Chatty.getMissedCount();\n\n`)),mdx(\"h2\",null,\"getMembers()\"),mdx(\"p\",null,\"this is for getting members with filter\"),mdx(\"pre\",null,mdx(\"code\",r({parentName:\"pre\"},{className:\"language-typescript\"}),`export interface MembersFilterType {\n    group?: string;\n    ChatId?: string;\n}\n\nawait Chatty.getMembers(filter: MembersFilterType);\n\n`)))}MDXContent.isMDXComponent=!0;\n","scope":{}},"fields":{"slug":"reference/static-methods.en","lastUpdatedOn":"2023-02-28T21:01:13+09:00"}},"__N_SSG":true}