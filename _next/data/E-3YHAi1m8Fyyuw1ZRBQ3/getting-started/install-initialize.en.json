{"pageProps":{"frontmatter":{},"headings":[{"depth":2,"value":"1. Client SDK installation"},{"depth":2,"value":"2. Cloud Setup"},{"depth":3,"value":"1). Create dashboard account"},{"depth":3,"value":"2). Create new application"},{"depth":3,"value":"3). Get API key"},{"depth":2,"value":"3. Initialize"},{"depth":3,"value":"1). What to initialize"},{"depth":3,"value":"2). Where to initialize"},{"depth":3,"value":"InitPayloadType"}],"body":{"compiledSource":"var c=Object.defineProperty,u=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var l=(e,t,a)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,i=(e,t)=>{for(var a in t||(t={}))r.call(t,a)&&l(e,a,t[a]);if(o)for(var a of o(t))p.call(t,a)&&l(e,a,t[a]);return e},s=(e,t)=>u(e,m(t));var d=(e,t)=>{var a={};for(var n in e)r.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(e!=null&&o)for(var n of o(e))t.indexOf(n)<0&&p.call(e,n)&&(a[n]=e[n]);return a};const makeShortcode=e=>function(a){return console.warn(\"Component \"+e+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",i({},a))},InfoBlock=makeShortcode(\"InfoBlock\"),NextBlock=makeShortcode(\"NextBlock\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var n=a,{components:e}=n,t=d(n,[\"components\"]);return mdx(MDXLayout,s(i(i({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"Install and Initialize\"),mdx(\"h2\",null,\"1. Client SDK installation\"),mdx(\"p\",null,\"with npm\"),mdx(\"pre\",null,mdx(\"code\",i({parentName:\"pre\"},{className:\"language-npm\"}),`npm install chatty-client\n`)),mdx(\"p\",null,\"with yarn\"),mdx(\"pre\",null,mdx(\"code\",i({parentName:\"pre\"},{className:\"language-yarn\"}),`yarn add chatty-client\n`)),mdx(\"h2\",null,\"2. Cloud Setup\"),mdx(\"h3\",null,\"1). Create dashboard account\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Go to \",mdx(\"a\",i({parentName:\"li\"},{href:\"https://dashboard.chatty-cloud.com\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"dashboard\")))),mdx(\"h3\",null,\"2). Create new application\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Create new application by clicking the button '+ New App' at \",mdx(\"a\",i({parentName:\"li\"},{href:\"https://dashboard.chatty-cloud.com/apps\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"dashboard app\")))),mdx(\"h3\",null,\"3). Get API key\"),mdx(\"p\",null,mdx(\"img\",i({parentName:\"p\"},{src:\"/img/docs/dashboard-apikey.png\",alt:\"API key at dashboard app tab\"}))),mdx(\"h2\",null,\"3. Initialize\"),mdx(\"h3\",null,\"1). What to initialize\"),mdx(\"p\",null,\"To use chatty-client sdk properly, need to initialize two things as below\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"API key (generated at dashboard)\"),mdx(\"li\",{parentName:\"ul\"},\"Chat Member (user unique id and name of your service platform)\")),mdx(\"h3\",null,\"2). Where to initialize\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Place where can specify the member identification during application booting up\"),mdx(\"li\",{parentName:\"ul\"},\"And after member signin or login\")),mdx(InfoBlock,{type:\"note\",mdxType:\"InfoBlock\"},\"\\u2022 Even if init function is called multiple time, the member is not registered as a duplicate (member is always unique)\"),mdx(InfoBlock,{type:\"note\",mdxType:\"InfoBlock\"},\"\\u2022 If member signout and signin again, the member id should be different with previous member id. especially, in case of third party oauth login, don't use provider's id as member id\"),mdx(\"p\",null,\"Below code is a part of App.tsx\"),mdx(\"pre\",null,mdx(\"code\",i({parentName:\"pre\"},{className:\"language-javascript\"}),`App.tsx\n\nimport Chatty from 'chatty-client';\n\n...\n\nconst App = () => {\n  const [ready, setReady] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!ready) {\n      bootstrap().finally(() => {\n        setReady(true);\n      });\n    }\n  }, []);\n\n  /*\n   *\n  When user id is specific, call init function\n  Ex) \n  1. during application bootup process, \n  2. after user join or login\n  */\n\n  if (ready && user) {\n    const missedCount = await Chatty.init({\n      apiKey: CHATTY_API_KEY,     // API Key of your app that created in dashboard \n      member: {\n        id: user.id,\n        name: user.name,\n        language: 'en',\n        country: 'US',\n        avatar: user.avatar,\n        deviceToken: 'xxxxxxxxxx',\n        group: '',\n        data: {\n          extraInfo: '',\n        }\n      },\n    });\n\n    // init method returns missedCount to use badge count in chat button\n    // store the result to global state and use it\n    store.dispatch(setChat({ missedCount: missedCount }));\n  }\n\n  return (\n    <View>\n    /* App Root Component*/\n    </View>\n  );\n\n  ...\n\n}\n`)),mdx(\"h3\",null,\"InitPayloadType\"),mdx(\"pre\",null,mdx(\"code\",i({parentName:\"pre\"},{className:\"language-typescript\"}),`export interface InitPayloadType {\n  apiKey: string;\n  member: {\n    id: string;\n    name: string;\n    language?: string;\n    country?: string;\n    avatar?: string;\n    deviceToken?: string;\n    group?: string;\n    data?: any | null;\n  };\n}\n`)),mdx(InfoBlock,{type:\"warning\",mdxType:\"InfoBlock\"},\"Please manage API Key securely.\"),mdx(NextBlock,{steps:[{text:\"Starting Chat\",link:\"/getting-started/starting-chat.en\"}],mdxType:\"NextBlock\"}))}MDXContent.isMDXComponent=!0;\n","scope":{}},"fields":{"slug":"getting-started/install-initialize.en","lastUpdatedOn":"2023-01-30T23:03:56+09:00"}},"__N_SSG":true}