{"pageProps":{"frontmatter":{},"headings":[{"depth":2,"value":"1. Register firebase credentials"},{"depth":2,"value":"2. Receiving remote message"},{"depth":2,"value":"3. How to show missed count badge"}],"body":{"compiledSource":"var m=Object.defineProperty,u=Object.defineProperties;var l=Object.getOwnPropertyDescriptors;var n=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var c=(e,t,s)=>t in e?m(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s,a=(e,t)=>{for(var s in t||(t={}))i.call(t,s)&&c(e,s,t[s]);if(n)for(var s of n(t))r.call(t,s)&&c(e,s,t[s]);return e},d=(e,t)=>u(e,l(t));var p=(e,t)=>{var s={};for(var o in e)i.call(e,o)&&t.indexOf(o)<0&&(s[o]=e[o]);if(e!=null&&n)for(var o of n(e))t.indexOf(o)<0&&r.call(e,o)&&(s[o]=e[o]);return s};const makeShortcode=e=>function(s){return console.warn(\"Component \"+e+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",a({},s))},InfoBlock=makeShortcode(\"InfoBlock\"),NextBlock=makeShortcode(\"NextBlock\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(s){var o=s,{components:e}=o,t=p(o,[\"components\"]);return mdx(MDXLayout,d(a(a({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"Push Notifications and Missed count badge\"),mdx(\"h2\",null,\"1. Register firebase credentials\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Required to register your firebase credential to send fcm messages to your chat members at dashboard\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"Firebase console \\u2192 project settings \\u2192 service accounts \\u2192 generate a new private key\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"p\",{parentName:\"li\"},\"download the generated key and upload the file at dashboard (refer to below dashboard screenshot)\"))),mdx(\"p\",null,\"That's it. now you can receive push notifications \"),mdx(\"p\",null,mdx(\"img\",a({parentName:\"p\"},{src:\"/img/docs/dashboard-fcm-credentials.png\",alt:\"dashboard-firebase-credentials\"}))),mdx(InfoBlock,{type:\"warning\",mdxType:\"InfoBlock\"},\"If remote message does not received, Check 'deviceToken' of the member is registered or not. It can be confirmed at payloads of your Chatty.init()\"),mdx(\"h2\",null,\"2. Receiving remote message\"),mdx(\"p\",null,\"Below code is a part of App.tsx\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-typescript\"}),`App.tsx\n\n...\n\nReact.useEffect(() => {\n  // Receiving when Foreground State\n  const unsubscribe = messaging().onMessage((message: FirebaseMessagingTypes.RemoteMessage) => {\n    console.debug('Receiving Notification Message:', message);\n    /*\n     * Remote meesage type\n      message = {\n        title: string, // sender member name\n        body: string, // text message\n        data: {\n          type: 'CHATTY_USER_MESSAGE' | 'CHATTY_ADMIN_MESSAGE' | 'CHATTY_SYSTEM_MESSAGE',\n          ChatId: string, // chat id\n          missedCount: {\n            total: number,\n            group: Array<{name: string, count: number}>\n          },\n        }\n      }\n     */\n\n    const activeScreen = navigation.getCurrentRoute().name;\n    if (activeScreen !== 'Chat') {\n      if (message.notification) {\n        displayNotification({\n          title: message.notification.title,\n          body: message.notification.body,\n          data: message.data,\n        });\n      }\n    }\n\n    // store missedCount to global redux state\n    dispatch(setChat({ missedCount: JSON.parse(message.data.missedCount) }));\n    \n  });\n});\n\n...\n\n`)),mdx(\"h2\",null,\"3. How to show missed count badge\"),mdx(\"p\",null,\"Below type show MissedCountType. can be used as ChattyTypes.MissedCountType\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-typescript\"}),`Types.d.ts\n\n...\n\nexport interface MissedCountType {\n  total: number;\n  group: Array<{\n    name: string;\n    count: number;\n  }>;\n}\n\n...\n\n`)),mdx(\"p\",null,\"Below code is a part of ChatButton.tsx\"),mdx(\"pre\",null,mdx(\"code\",a({parentName:\"pre\"},{className:\"language-typescript\"}),`ChatButton.tsx\n\nimport * as React from 'react';\nimport { View } from 'react-native';\n\nconst ChatButton = (props: ChatButtonProps) => {\n  // global redux state for missed message count\n  // Can access missed count using chat.missedCount\n  // chat.missedCount should be updated in below 4 cases\n  // 1. when Chatty.init() is called, if it success, then missedCount is returned\n  // 2. when receive a new message push notification (refer to data of push notification)\n  // 3. when AppState is changed, if AppState become foreground from others, then call Chatty.getMissedCount()\n  // 4. when Chat connect or disconnect, it dismiss missed count.\n  const chat = useChat();  \n\n  return (\n    <View>\n      /* Button UI components*/\n      /* Use chat.missedCount.total or chat.missedCount.group */\n    </View>\n  )\n}\n`)),mdx(NextBlock,{steps:[{text:\"Static Methods\",link:\"/reference/static-methods\"}],mdxType:\"NextBlock\"}))}MDXContent.isMDXComponent=!0;\n","scope":{}},"fields":{"slug":"getting-started/push-notifications","lastUpdatedOn":"2022-08-25T21:28:56+09:00"}},"__N_SSG":true}